{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Audiomentations A Python library for audio data augmentation. Inspired by albumentations . Useful for deep learning. Runs on CPU. Supports mono audio and multichannel audio . Can be integrated in training pipelines in e.g. Tensorflow/Keras or Pytorch. Has helped people get world-class results in Kaggle competitions. Is used by companies making next-generation audio products. Need a Pytorch-specific alternative with GPU support? Check out torch-audiomentations ! Setup pip install audiomentations Optional requirements Some features have extra dependencies. Extra python package dependencies can be installed by running pip install audiomentations[extras] Feature Extra dependencies LoudnessNormalization pyloudnorm Mp3Compression ffmpeg and [ pydub or lameenc ] RoomSimulator pyroomacoustics Note: ffmpeg can be installed via e.g. conda or from the official ffmpeg download page . Usage example Waveform from audiomentations import Compose, AddGaussianNoise, TimeStretch, PitchShift, Shift import numpy as np augment = Compose([ AddGaussianNoise(min_amplitude=0.001, max_amplitude=0.015, p=0.5), TimeStretch(min_rate=0.8, max_rate=1.25, p=0.5), PitchShift(min_semitones=-4, max_semitones=4, p=0.5), Shift(min_fraction=-0.5, max_fraction=0.5, p=0.5), ]) # Generate 2 seconds of dummy audio for the sake of example samples = np.random.uniform(low=-0.2, high=0.2, size=(32000,)).astype(np.float32) # Augment/transform/perturb the audio data augmented_samples = augment(samples=samples, sample_rate=16000) Check out the source code at audiomentations/augmentations/ to see the waveform transforms you can apply, and what arguments they have. Spectrogram from audiomentations import SpecCompose, SpecChannelShuffle, SpecFrequencyMask import numpy as np augment = SpecCompose( [ SpecChannelShuffle(p=0.5), SpecFrequencyMask(p=0.5), ] ) # Example spectrogram with 1025 frequency bins, 256 time steps and 2 audio channels spectrogram = np.random.random((1025, 256, 2)) # Augment/transform/perturb the spectrogram augmented_spectrogram = augment(spectrogram) See audiomentations/spec_augmentations/spectrogram_transforms.py for spectrogram transforms. Waveform transforms Some of the following waveform transforms can be visualized (for understanding) by the audio-transformation-visualization GUI (made by phrasenmaeher), where you can upload your own input wav file For a list and brief explanation of all waveform transforms, see Waveform transforms Spectrogram transforms For a list and brief explanation of all spectrogram transforms, see Spectrogram transforms Composition classes Compose Compose applies the given sequence of transforms when called, optionally shuffling the sequence for every call. SpecCompose Same as Compose, but for spectrogram transforms OneOf OneOf randomly picks one of the given transforms when called, and applies that transform. SomeOf SomeOf randomly picks several of the given transforms when called, and applies those transforms. Known limitations A few transforms do not support multichannel audio yet. See Multichannel audio Expects the input dtype to be float32, and have values between -1 and 1. The code runs on CPU, not GPU. For a GPU-compatible version, check out pytorch-audiomentations Multiprocessing probably works but is not officially supported yet Contributions are welcome! Multichannel audio As of v0.22.0, all transforms except AddBackgroundNoise and AddShortNoises support not only mono audio (1-dimensional numpy arrays), but also stereo audio, i.e. 2D arrays with shape like (num_channels, num_samples) Acknowledgements Thanks to Nomono for backing audiomentations. Thanks to all contributors who help improving audiomentations.","title":"Home"},{"location":"#audiomentations","text":"A Python library for audio data augmentation. Inspired by albumentations . Useful for deep learning. Runs on CPU. Supports mono audio and multichannel audio . Can be integrated in training pipelines in e.g. Tensorflow/Keras or Pytorch. Has helped people get world-class results in Kaggle competitions. Is used by companies making next-generation audio products. Need a Pytorch-specific alternative with GPU support? Check out torch-audiomentations !","title":"Audiomentations"},{"location":"#setup","text":"pip install audiomentations","title":"Setup"},{"location":"#optional-requirements","text":"Some features have extra dependencies. Extra python package dependencies can be installed by running pip install audiomentations[extras] Feature Extra dependencies LoudnessNormalization pyloudnorm Mp3Compression ffmpeg and [ pydub or lameenc ] RoomSimulator pyroomacoustics Note: ffmpeg can be installed via e.g. conda or from the official ffmpeg download page .","title":"Optional requirements"},{"location":"#usage-example","text":"","title":"Usage example"},{"location":"#waveform","text":"from audiomentations import Compose, AddGaussianNoise, TimeStretch, PitchShift, Shift import numpy as np augment = Compose([ AddGaussianNoise(min_amplitude=0.001, max_amplitude=0.015, p=0.5), TimeStretch(min_rate=0.8, max_rate=1.25, p=0.5), PitchShift(min_semitones=-4, max_semitones=4, p=0.5), Shift(min_fraction=-0.5, max_fraction=0.5, p=0.5), ]) # Generate 2 seconds of dummy audio for the sake of example samples = np.random.uniform(low=-0.2, high=0.2, size=(32000,)).astype(np.float32) # Augment/transform/perturb the audio data augmented_samples = augment(samples=samples, sample_rate=16000) Check out the source code at audiomentations/augmentations/ to see the waveform transforms you can apply, and what arguments they have.","title":"Waveform"},{"location":"#spectrogram","text":"from audiomentations import SpecCompose, SpecChannelShuffle, SpecFrequencyMask import numpy as np augment = SpecCompose( [ SpecChannelShuffle(p=0.5), SpecFrequencyMask(p=0.5), ] ) # Example spectrogram with 1025 frequency bins, 256 time steps and 2 audio channels spectrogram = np.random.random((1025, 256, 2)) # Augment/transform/perturb the spectrogram augmented_spectrogram = augment(spectrogram) See audiomentations/spec_augmentations/spectrogram_transforms.py for spectrogram transforms.","title":"Spectrogram"},{"location":"#waveform-transforms","text":"Some of the following waveform transforms can be visualized (for understanding) by the audio-transformation-visualization GUI (made by phrasenmaeher), where you can upload your own input wav file For a list and brief explanation of all waveform transforms, see Waveform transforms","title":"Waveform transforms"},{"location":"#spectrogram-transforms","text":"For a list and brief explanation of all spectrogram transforms, see Spectrogram transforms","title":"Spectrogram transforms"},{"location":"#composition-classes","text":"","title":"Composition classes"},{"location":"#compose","text":"Compose applies the given sequence of transforms when called, optionally shuffling the sequence for every call.","title":"Compose"},{"location":"#speccompose","text":"Same as Compose, but for spectrogram transforms","title":"SpecCompose"},{"location":"#oneof","text":"OneOf randomly picks one of the given transforms when called, and applies that transform.","title":"OneOf"},{"location":"#someof","text":"SomeOf randomly picks several of the given transforms when called, and applies those transforms.","title":"SomeOf"},{"location":"#known-limitations","text":"A few transforms do not support multichannel audio yet. See Multichannel audio Expects the input dtype to be float32, and have values between -1 and 1. The code runs on CPU, not GPU. For a GPU-compatible version, check out pytorch-audiomentations Multiprocessing probably works but is not officially supported yet Contributions are welcome!","title":"Known limitations"},{"location":"#multichannel-audio","text":"As of v0.22.0, all transforms except AddBackgroundNoise and AddShortNoises support not only mono audio (1-dimensional numpy arrays), but also stereo audio, i.e. 2D arrays with shape like (num_channels, num_samples)","title":"Multichannel audio"},{"location":"#acknowledgements","text":"Thanks to Nomono for backing audiomentations. Thanks to all contributors who help improving audiomentations.","title":"Acknowledgements"},{"location":"alternatives/","text":"Alternatives Audiomentations isn't the only python library that can do various types of audio data augmentation/degradation! Here's an overview: Name Github stars License Last commit GPU support? audio-degradation-toolbox audio_degrader audiomentations AugLy kapre muda nlpaug pedalboard pydiogment python-audio-effects sigment SpecAugment spec_augment teal torch-audiomentations torchaudio-augmentations WavAugment","title":"Alternatives"},{"location":"alternatives/#alternatives","text":"Audiomentations isn't the only python library that can do various types of audio data augmentation/degradation! Here's an overview: Name Github stars License Last commit GPU support? audio-degradation-toolbox audio_degrader audiomentations AugLy kapre muda nlpaug pedalboard pydiogment python-audio-effects sigment SpecAugment spec_augment teal torch-audiomentations torchaudio-augmentations WavAugment","title":"Alternatives"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased 0.26.0 - 2022-08-19 Added Add new transform Lambda . Thanks to Thanatoz-1. Add new transform Limiter . Thanks to pzelasko. Fixed Fix incorrect type hints in RoomSimulator Make Shift robust to different sample rate inputs when parameters are frozen 0.25.1 - 2022-06-15 Fixed Fix a bug where RoomSimulator would treat an x value as if it was y, and vice versa 0.25.0 - 2022-05-30 Added Add AirAbsorption transform Add mp4 to the list of recognized audio filename extensions Changed Guard against invalid params in TimeMask Emit FutureWarning instead of UserWarning in Trim and ApplyImpulseResponse Allow specifying a file path, a folder path, a list of files or a list of folders to ApplyImpulseResponse , AddBackgroundNoise and AddShortNoises . Previously only a path to a folder was allowed. Fixed Fix a bug with noise_transform in AddBackgroundNoise where some SNR calculations were done before the noise_transform was applied. This has sometimes led to incorrect SNR in the output. This changes the behavior of AddBackgroundNoise (when noise_transform is used). Removed Remove support for Python 3.6, as it is past its end of life already. RIP. 0.24.0 - 2022-03-18 Added Add SevenBandParametricEQ transform Add optional noise_transform in AddShortNoises Add .aac and .aif to the list of recognized audio filename endings Changed Show warning if top_db and/or p in Trim are not specified because their default values will change in a future version Fixed Fix filter instability bug related to center freq above nyquist freq in LowShelfFilter and HighShelfFilter 0.23.0 - 2022-03-07 Added Add Padding transform Add RoomSimulator transform for simulating shoebox rooms using pyroomacoustics Add parameter signal_gain_in_db_during_noise in AddShortNoises Changed Not specifying a value for leave_length_unchanged in AddImpulseResponse now emits a warning, as the default value will change from False to True in a future version. Removed Remove the deprecated AddImpulseResponse alias. Use ApplyImpulseResponse instead. Remove support for the legacy parameters min_SNR and max_SNR in AddGaussianSNR Remove useless default path value in AddBackgroundNoise , AddShortNoises and ApplyImpulseResponse 0.22.0 - 2022-02-18 Added Implement GainTransition Add support for librosa 0.9 Add support for stereo audio in Mp3Compression , Resample and Trim Add \"relative_to_whole_input\" option for noise_rms parameter in AddShortNoises Add optional noise_transform in AddBackgroundNoise Changed Improve speed of PitchShift by 6-18% when the input audio is stereo Removed Remove support for librosa<=0.7.2 0.21.0 - 2022-02-10 Added Add support for multichannel audio in ApplyImpulseResponse , BandPassFilter , HighPassFilter and LowPassFilter Add BandStopFilter (similar to FrequencyMask, but with overhauled defaults and parameter randomization behavior), PeakingFilter , LowShelfFilter and HighShelfFilter Add parameter add_all_noises_with_same_level in AddShortNoises Changed Change BandPassFilter , LowPassFilter , HighPassFilter , to use scipy's butterworth filters instead of pydub. Now they have parametrized roll-off. Filters are now steeper than before by default - set min_rolloff=6, max_rolloff=6 to get the old behavior. They also support zero-phase filtering now. And they're at least ~25x times faster than before! Removed Remove optional wavio dependency for audio loading 0.20.0 - 2021-11-18 Added Implement OneOf and SomeOf for applying one of or some of many transforms. Transforms are randomly chosen every call. Inspired by augly. Thanks to Cangonin and iver56. Add a new argument apply_to_children (bool) in randomize_parameters , freeze_parameters and unfreeze_parameters in Compose and SpecCompose . Changed Insert three new parameters in AddBackgroundNoise : noise_rms (defaults to \"relative\", which is the old behavior), min_absolute_rms_in_db and max_absolute_rms_in_db . This may be a breaking change if you used AddBackgroundNoise with positional arguments in earlier versions of audiomentations! Please use keyword arguments to be on the safe side - it should be backwards compatible then. Fixed Remove global pydub import which was accidentally introduced in v0.18.0. pydub is considered an optional dependency and is imported only on demand now. 0.19.0 - 2021-10-18 Added Implement TanhDistortion . Thanks to atamazian and iver56. Add a noise_rms parameter to AddShortNoises . It defaults to relative , which is the old behavior. absolute allows for adding loud noises to parts that are relatively silent in the input. 0.18.0 - 2021-08-05 Added Implement BandPassFilter , HighPassFilter , LowPassFilter and Reverse . Thanks to atamazian. 0.17.0 - 2021-06-25 Added Add a fade option in Shift for eliminating unwanted clicks Add support for 32-bit int wav loading with scipy>=1.6 Add support for float64 wav files. However, the use of this format is discouraged, since float32 is more than enough for audio in most cases. Implement Clip . Thanks to atamazian. Add some parameter sanity checks in AddGaussianNoise Officially support librosa 0.8.1 Changed Rename AddImpulseResponse to ApplyImpulseResponse . The former will still work for now, but give a warning. When looking for audio files in AddImpulseResponse , AddBackgroundNoise and AddShortNoises , follow symlinks by default. When using the new parameters min_snr_in_db and max_snr_in_db in AddGaussianSNR , SNRs will be picked uniformly in the decibel scale instead of in the linear amplitude ratio scale. The new behavior aligns more with human hearing, which is not linear. Fixed Avoid division by zero in AddImpulseResponse when input is digital silence (all zeros) Fix inverse SNR characteristics in AddGaussianSNR . It will continue working as before unless you switch to the new parameters min_snr_in_db and max_snr_in_db . If you use the old parameters, you'll get a warning. 0.16.0 - 2021-02-11 Added Implement SpecCompose for applying a pipeline of spectrogram transforms. Thanks to omerferhatt. Fixed Fix a bug in SpecChannelShuffle where it did not support more than 3 audio channels. Thanks to omerferhatt. Limit scipy version range to >=1.0,<1.6 to avoid issues with loading 24-bit wav files. Support for scipy>=1.6 will be added later. 0.15.0 - 2020-12-10 Added Add an option leave_length_unchanged to AddImpulseResponse Fixed Fix picklability of instances of AddImpulseResponse , AddBackgroundNoise and AddShortNoises 0.14.0 - 2020-12-06 Added Implement LoudnessNormalization Implement randomize_parameters in Compose . Thanks to SolomidHero. Add multichannel support to AddGaussianNoise , AddGaussianSNR , ClippingDistortion , FrequencyMask , PitchShift , Shift , TimeMask and TimeStretch 0.13.0 - 2020-11-10 Added Lay the foundation for spectrogram transforms. Implement SpecChannelShuffle and SpecFrequencyMask . Configurable LRU cache for transforms that use external sound files. Thanks to alumae. Officially add multichannel support to Normalize Changed Show a warning if a waveform had to be resampled after loading it. This is because resampling is slow. Ideally, files on disk should already have the desired sample rate. Fixed Correctly find audio files with upper case filename extensions. Fix a bug where AddBackgroundNoise crashed when trying to add digital silence to an input. Thanks to juheeuu. 0.12.1 - 2020-09-28 Changed Speed up AddBackgroundNoise , AddShortNoises and AddImpulseResponse by loading wav files with scipy or wavio instead of librosa. 0.12.0 - 2020-09-23 Added Implement Mp3Compression Officially support multichannel audio in Gain and PolarityInversion Add m4a and opus to the list of recognized audio filename extensions Changed Expand range of supported librosa versions Removed Python <= 3.5 is no longer officially supported, since Python 3.5 has reached end-of-life Breaking change: Internal util functions are no longer exposed directly. If you were doing e.g. from audiomentations import calculate_rms , now you have to do from audiomentations.core.utils import calculate_rms 0.11.0 - 2020-08-27 Added Implement Gain and PolarityInversion . Thanks to Spijkervet for the inspiration. 0.10.1 - 2020-07-27 Changed Improve the performance of AddBackgroundNoise and AddShortNoises by optimizing the implementation of calculate_rms . Fixed Improve compatibility of output files written by the demo script. Thanks to xwJohn. Fix division by zero bug in Normalize . Thanks to ZFTurbo. 0.10.0 - 2020-05-05 Added AddImpulseResponse , AddBackgroundNoise and AddShortNoises now support aiff files in addition to flac, mp3, ogg and wav Changed Breaking change: AddImpulseResponse , AddBackgroundNoise and AddShortNoises now include subfolders when searching for files. This is useful when your sound files are organized in subfolders. Fixed Fix filter instability bug in FrequencyMask . Thanks to kvilouras. 0.9.0 - 2020-02-20 Added Remember randomized/chosen effect parameters. This allows for freezing the parameters and applying the same effect to multiple sounds. Use transform.freeze_parameters() and transform.unfreeze_parameters() for this. Implement transform.serialize_parameters(). Useful for when you want to store metadata on how a sound was perturbed. Add a rollover parameter to Shift . This allows for introducing silence instead of a wrapped part of the sound. Add support for flac in AddImpulseResponse Implement AddBackgroundNoise transform. Useful for when you want to add background noise to all of your sound. You need to give it a folder of background noises to choose from. Implement AddShortNoises . Useful for when you want to add (bursts of) short noise sounds to your input audio. Changed Disregard non-audio files when looking for impulse response files Switch to a faster convolve implementation. This makes AddImpulseResponse significantly faster. Expand supported range of librosa versions Fixed Fix a bug in ClippingDistortion where the min_percentile_threshold was not respected as expected. Improve handling of empty input 0.8.0 - 2020-01-28 Added Add shuffle parameter in Composer Add Resample transformation Add ClippingDistortion transformation Add fade parameter to TimeMask Thanks to askskro 0.7.0 - 2020-01-14 Added AddGaussianSNR AddImpulseResponse FrequencyMask TimeMask Trim Thanks to karpnv 0.6.0 - 2019-05-27 Added Implement peak normalization 0.5.0 - 2019-02-23 Added Implement Shift transform Changed Ensure p is within bounds 0.4.0 - 2019-02-19 Added Implement PitchShift transform Fixed Fix output dtype of AddGaussianNoise 0.3.0 - 2019-02-19 Added Implement leave_length_unchanged in TimeStretch 0.2.0 - 2019-02-18 Added Add TimeStretch transform Parametrize AddGaussianNoise 0.1.0 - 2019-02-15 Added Initial release. Includes only one transform: AddGaussianNoise","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#0260-2022-08-19","text":"","title":"0.26.0 - 2022-08-19"},{"location":"changelog/#added","text":"Add new transform Lambda . Thanks to Thanatoz-1. Add new transform Limiter . Thanks to pzelasko.","title":"Added"},{"location":"changelog/#fixed","text":"Fix incorrect type hints in RoomSimulator Make Shift robust to different sample rate inputs when parameters are frozen","title":"Fixed"},{"location":"changelog/#0251-2022-06-15","text":"","title":"0.25.1 - 2022-06-15"},{"location":"changelog/#fixed_1","text":"Fix a bug where RoomSimulator would treat an x value as if it was y, and vice versa","title":"Fixed"},{"location":"changelog/#0250-2022-05-30","text":"","title":"0.25.0 - 2022-05-30"},{"location":"changelog/#added_1","text":"Add AirAbsorption transform Add mp4 to the list of recognized audio filename extensions","title":"Added"},{"location":"changelog/#changed","text":"Guard against invalid params in TimeMask Emit FutureWarning instead of UserWarning in Trim and ApplyImpulseResponse Allow specifying a file path, a folder path, a list of files or a list of folders to ApplyImpulseResponse , AddBackgroundNoise and AddShortNoises . Previously only a path to a folder was allowed.","title":"Changed"},{"location":"changelog/#fixed_2","text":"Fix a bug with noise_transform in AddBackgroundNoise where some SNR calculations were done before the noise_transform was applied. This has sometimes led to incorrect SNR in the output. This changes the behavior of AddBackgroundNoise (when noise_transform is used).","title":"Fixed"},{"location":"changelog/#removed","text":"Remove support for Python 3.6, as it is past its end of life already. RIP.","title":"Removed"},{"location":"changelog/#0240-2022-03-18","text":"","title":"0.24.0 - 2022-03-18"},{"location":"changelog/#added_2","text":"Add SevenBandParametricEQ transform Add optional noise_transform in AddShortNoises Add .aac and .aif to the list of recognized audio filename endings","title":"Added"},{"location":"changelog/#changed_1","text":"Show warning if top_db and/or p in Trim are not specified because their default values will change in a future version","title":"Changed"},{"location":"changelog/#fixed_3","text":"Fix filter instability bug related to center freq above nyquist freq in LowShelfFilter and HighShelfFilter","title":"Fixed"},{"location":"changelog/#0230-2022-03-07","text":"","title":"0.23.0 - 2022-03-07"},{"location":"changelog/#added_3","text":"Add Padding transform Add RoomSimulator transform for simulating shoebox rooms using pyroomacoustics Add parameter signal_gain_in_db_during_noise in AddShortNoises","title":"Added"},{"location":"changelog/#changed_2","text":"Not specifying a value for leave_length_unchanged in AddImpulseResponse now emits a warning, as the default value will change from False to True in a future version.","title":"Changed"},{"location":"changelog/#removed_1","text":"Remove the deprecated AddImpulseResponse alias. Use ApplyImpulseResponse instead. Remove support for the legacy parameters min_SNR and max_SNR in AddGaussianSNR Remove useless default path value in AddBackgroundNoise , AddShortNoises and ApplyImpulseResponse","title":"Removed"},{"location":"changelog/#0220-2022-02-18","text":"","title":"0.22.0 - 2022-02-18"},{"location":"changelog/#added_4","text":"Implement GainTransition Add support for librosa 0.9 Add support for stereo audio in Mp3Compression , Resample and Trim Add \"relative_to_whole_input\" option for noise_rms parameter in AddShortNoises Add optional noise_transform in AddBackgroundNoise","title":"Added"},{"location":"changelog/#changed_3","text":"Improve speed of PitchShift by 6-18% when the input audio is stereo","title":"Changed"},{"location":"changelog/#removed_2","text":"Remove support for librosa<=0.7.2","title":"Removed"},{"location":"changelog/#0210-2022-02-10","text":"","title":"0.21.0 - 2022-02-10"},{"location":"changelog/#added_5","text":"Add support for multichannel audio in ApplyImpulseResponse , BandPassFilter , HighPassFilter and LowPassFilter Add BandStopFilter (similar to FrequencyMask, but with overhauled defaults and parameter randomization behavior), PeakingFilter , LowShelfFilter and HighShelfFilter Add parameter add_all_noises_with_same_level in AddShortNoises","title":"Added"},{"location":"changelog/#changed_4","text":"Change BandPassFilter , LowPassFilter , HighPassFilter , to use scipy's butterworth filters instead of pydub. Now they have parametrized roll-off. Filters are now steeper than before by default - set min_rolloff=6, max_rolloff=6 to get the old behavior. They also support zero-phase filtering now. And they're at least ~25x times faster than before!","title":"Changed"},{"location":"changelog/#removed_3","text":"Remove optional wavio dependency for audio loading","title":"Removed"},{"location":"changelog/#0200-2021-11-18","text":"","title":"0.20.0 - 2021-11-18"},{"location":"changelog/#added_6","text":"Implement OneOf and SomeOf for applying one of or some of many transforms. Transforms are randomly chosen every call. Inspired by augly. Thanks to Cangonin and iver56. Add a new argument apply_to_children (bool) in randomize_parameters , freeze_parameters and unfreeze_parameters in Compose and SpecCompose .","title":"Added"},{"location":"changelog/#changed_5","text":"Insert three new parameters in AddBackgroundNoise : noise_rms (defaults to \"relative\", which is the old behavior), min_absolute_rms_in_db and max_absolute_rms_in_db . This may be a breaking change if you used AddBackgroundNoise with positional arguments in earlier versions of audiomentations! Please use keyword arguments to be on the safe side - it should be backwards compatible then.","title":"Changed"},{"location":"changelog/#fixed_4","text":"Remove global pydub import which was accidentally introduced in v0.18.0. pydub is considered an optional dependency and is imported only on demand now.","title":"Fixed"},{"location":"changelog/#0190-2021-10-18","text":"","title":"0.19.0 - 2021-10-18"},{"location":"changelog/#added_7","text":"Implement TanhDistortion . Thanks to atamazian and iver56. Add a noise_rms parameter to AddShortNoises . It defaults to relative , which is the old behavior. absolute allows for adding loud noises to parts that are relatively silent in the input.","title":"Added"},{"location":"changelog/#0180-2021-08-05","text":"","title":"0.18.0 - 2021-08-05"},{"location":"changelog/#added_8","text":"Implement BandPassFilter , HighPassFilter , LowPassFilter and Reverse . Thanks to atamazian.","title":"Added"},{"location":"changelog/#0170-2021-06-25","text":"","title":"0.17.0 - 2021-06-25"},{"location":"changelog/#added_9","text":"Add a fade option in Shift for eliminating unwanted clicks Add support for 32-bit int wav loading with scipy>=1.6 Add support for float64 wav files. However, the use of this format is discouraged, since float32 is more than enough for audio in most cases. Implement Clip . Thanks to atamazian. Add some parameter sanity checks in AddGaussianNoise Officially support librosa 0.8.1","title":"Added"},{"location":"changelog/#changed_6","text":"Rename AddImpulseResponse to ApplyImpulseResponse . The former will still work for now, but give a warning. When looking for audio files in AddImpulseResponse , AddBackgroundNoise and AddShortNoises , follow symlinks by default. When using the new parameters min_snr_in_db and max_snr_in_db in AddGaussianSNR , SNRs will be picked uniformly in the decibel scale instead of in the linear amplitude ratio scale. The new behavior aligns more with human hearing, which is not linear.","title":"Changed"},{"location":"changelog/#fixed_5","text":"Avoid division by zero in AddImpulseResponse when input is digital silence (all zeros) Fix inverse SNR characteristics in AddGaussianSNR . It will continue working as before unless you switch to the new parameters min_snr_in_db and max_snr_in_db . If you use the old parameters, you'll get a warning.","title":"Fixed"},{"location":"changelog/#0160-2021-02-11","text":"","title":"0.16.0 - 2021-02-11"},{"location":"changelog/#added_10","text":"Implement SpecCompose for applying a pipeline of spectrogram transforms. Thanks to omerferhatt.","title":"Added"},{"location":"changelog/#fixed_6","text":"Fix a bug in SpecChannelShuffle where it did not support more than 3 audio channels. Thanks to omerferhatt. Limit scipy version range to >=1.0,<1.6 to avoid issues with loading 24-bit wav files. Support for scipy>=1.6 will be added later.","title":"Fixed"},{"location":"changelog/#0150-2020-12-10","text":"","title":"0.15.0 - 2020-12-10"},{"location":"changelog/#added_11","text":"Add an option leave_length_unchanged to AddImpulseResponse","title":"Added"},{"location":"changelog/#fixed_7","text":"Fix picklability of instances of AddImpulseResponse , AddBackgroundNoise and AddShortNoises","title":"Fixed"},{"location":"changelog/#0140-2020-12-06","text":"","title":"0.14.0 - 2020-12-06"},{"location":"changelog/#added_12","text":"Implement LoudnessNormalization Implement randomize_parameters in Compose . Thanks to SolomidHero. Add multichannel support to AddGaussianNoise , AddGaussianSNR , ClippingDistortion , FrequencyMask , PitchShift , Shift , TimeMask and TimeStretch","title":"Added"},{"location":"changelog/#0130-2020-11-10","text":"","title":"0.13.0 - 2020-11-10"},{"location":"changelog/#added_13","text":"Lay the foundation for spectrogram transforms. Implement SpecChannelShuffle and SpecFrequencyMask . Configurable LRU cache for transforms that use external sound files. Thanks to alumae. Officially add multichannel support to Normalize","title":"Added"},{"location":"changelog/#changed_7","text":"Show a warning if a waveform had to be resampled after loading it. This is because resampling is slow. Ideally, files on disk should already have the desired sample rate.","title":"Changed"},{"location":"changelog/#fixed_8","text":"Correctly find audio files with upper case filename extensions. Fix a bug where AddBackgroundNoise crashed when trying to add digital silence to an input. Thanks to juheeuu.","title":"Fixed"},{"location":"changelog/#0121-2020-09-28","text":"","title":"0.12.1 - 2020-09-28"},{"location":"changelog/#changed_8","text":"Speed up AddBackgroundNoise , AddShortNoises and AddImpulseResponse by loading wav files with scipy or wavio instead of librosa.","title":"Changed"},{"location":"changelog/#0120-2020-09-23","text":"","title":"0.12.0 - 2020-09-23"},{"location":"changelog/#added_14","text":"Implement Mp3Compression Officially support multichannel audio in Gain and PolarityInversion Add m4a and opus to the list of recognized audio filename extensions","title":"Added"},{"location":"changelog/#changed_9","text":"Expand range of supported librosa versions","title":"Changed"},{"location":"changelog/#removed_4","text":"Python <= 3.5 is no longer officially supported, since Python 3.5 has reached end-of-life Breaking change: Internal util functions are no longer exposed directly. If you were doing e.g. from audiomentations import calculate_rms , now you have to do from audiomentations.core.utils import calculate_rms","title":"Removed"},{"location":"changelog/#0110-2020-08-27","text":"","title":"0.11.0 - 2020-08-27"},{"location":"changelog/#added_15","text":"Implement Gain and PolarityInversion . Thanks to Spijkervet for the inspiration.","title":"Added"},{"location":"changelog/#0101-2020-07-27","text":"","title":"0.10.1 - 2020-07-27"},{"location":"changelog/#changed_10","text":"Improve the performance of AddBackgroundNoise and AddShortNoises by optimizing the implementation of calculate_rms .","title":"Changed"},{"location":"changelog/#fixed_9","text":"Improve compatibility of output files written by the demo script. Thanks to xwJohn. Fix division by zero bug in Normalize . Thanks to ZFTurbo.","title":"Fixed"},{"location":"changelog/#0100-2020-05-05","text":"","title":"0.10.0 - 2020-05-05"},{"location":"changelog/#added_16","text":"AddImpulseResponse , AddBackgroundNoise and AddShortNoises now support aiff files in addition to flac, mp3, ogg and wav","title":"Added"},{"location":"changelog/#changed_11","text":"Breaking change: AddImpulseResponse , AddBackgroundNoise and AddShortNoises now include subfolders when searching for files. This is useful when your sound files are organized in subfolders.","title":"Changed"},{"location":"changelog/#fixed_10","text":"Fix filter instability bug in FrequencyMask . Thanks to kvilouras.","title":"Fixed"},{"location":"changelog/#090-2020-02-20","text":"","title":"0.9.0 - 2020-02-20"},{"location":"changelog/#added_17","text":"Remember randomized/chosen effect parameters. This allows for freezing the parameters and applying the same effect to multiple sounds. Use transform.freeze_parameters() and transform.unfreeze_parameters() for this. Implement transform.serialize_parameters(). Useful for when you want to store metadata on how a sound was perturbed. Add a rollover parameter to Shift . This allows for introducing silence instead of a wrapped part of the sound. Add support for flac in AddImpulseResponse Implement AddBackgroundNoise transform. Useful for when you want to add background noise to all of your sound. You need to give it a folder of background noises to choose from. Implement AddShortNoises . Useful for when you want to add (bursts of) short noise sounds to your input audio.","title":"Added"},{"location":"changelog/#changed_12","text":"Disregard non-audio files when looking for impulse response files Switch to a faster convolve implementation. This makes AddImpulseResponse significantly faster. Expand supported range of librosa versions","title":"Changed"},{"location":"changelog/#fixed_11","text":"Fix a bug in ClippingDistortion where the min_percentile_threshold was not respected as expected. Improve handling of empty input","title":"Fixed"},{"location":"changelog/#080-2020-01-28","text":"","title":"0.8.0 - 2020-01-28"},{"location":"changelog/#added_18","text":"Add shuffle parameter in Composer Add Resample transformation Add ClippingDistortion transformation Add fade parameter to TimeMask Thanks to askskro","title":"Added"},{"location":"changelog/#070-2020-01-14","text":"","title":"0.7.0 - 2020-01-14"},{"location":"changelog/#added_19","text":"AddGaussianSNR AddImpulseResponse FrequencyMask TimeMask Trim Thanks to karpnv","title":"Added"},{"location":"changelog/#060-2019-05-27","text":"","title":"0.6.0 - 2019-05-27"},{"location":"changelog/#added_20","text":"Implement peak normalization","title":"Added"},{"location":"changelog/#050-2019-02-23","text":"","title":"0.5.0 - 2019-02-23"},{"location":"changelog/#added_21","text":"Implement Shift transform","title":"Added"},{"location":"changelog/#changed_13","text":"Ensure p is within bounds","title":"Changed"},{"location":"changelog/#040-2019-02-19","text":"","title":"0.4.0 - 2019-02-19"},{"location":"changelog/#added_22","text":"Implement PitchShift transform","title":"Added"},{"location":"changelog/#fixed_12","text":"Fix output dtype of AddGaussianNoise","title":"Fixed"},{"location":"changelog/#030-2019-02-19","text":"","title":"0.3.0 - 2019-02-19"},{"location":"changelog/#added_23","text":"Implement leave_length_unchanged in TimeStretch","title":"Added"},{"location":"changelog/#020-2019-02-18","text":"","title":"0.2.0 - 2019-02-18"},{"location":"changelog/#added_24","text":"Add TimeStretch transform Parametrize AddGaussianNoise","title":"Added"},{"location":"changelog/#010-2019-02-15","text":"","title":"0.1.0 - 2019-02-15"},{"location":"changelog/#added_25","text":"Initial release. Includes only one transform: AddGaussianNoise","title":"Added"},{"location":"packaging/","text":"Check that all unit tests are OK Run the demo and listen to the sounds to empirically check the results Bump the version number in audiomentations/__init__.py in accordance with the semantic versioning specification Write a summary of the changes in the version history section in README.md Commit and push the change with a commit message like this: \"Release vx.y.z\" (replace x.y.z with the package version) Add and push a git tag to the release commit Add a release here: https://github.com/iver56/audiomentations/releases/new Update the Zenodo badge in README.md. Commit and push. python setup.py sdist bdist_wheel python -m twine upload dist/*","title":"Packaging"},{"location":"spectrogram_transforms/","text":"audiomentations is in a very early (read: not very useful yet) stage when it comes to spectrogram transforms. Consider applying waveform transforms before converting your waveforms to spectrograms, or check out alternative libraries SpecChannelShuffle Added in v0.13.0 Shuffle the channels of a multichannel spectrogram. This can help combat positional bias. SpecFrequencyMask Added in v0.13.0 Mask a set of frequencies in a spectrogram, \u00e0 la Google AI SpecAugment. This type of data augmentation has proved to make speech recognition models more robust. The masked frequencies can be replaced with either the mean of the original values or a given constant (e.g. zero).","title":"Spectrogram transforms"},{"location":"spectrogram_transforms/#specchannelshuffle","text":"Added in v0.13.0 Shuffle the channels of a multichannel spectrogram. This can help combat positional bias.","title":"SpecChannelShuffle"},{"location":"spectrogram_transforms/#specfrequencymask","text":"Added in v0.13.0 Mask a set of frequencies in a spectrogram, \u00e0 la Google AI SpecAugment. This type of data augmentation has proved to make speech recognition models more robust. The masked frequencies can be replaced with either the mean of the original values or a given constant (e.g. zero).","title":"SpecFrequencyMask"},{"location":"waveform_transforms/","text":"AddBackgroundNoise Added in v0.9.0 Mix in another sound, e.g. a background noise. Useful if your original sound is clean and you want to simulate an environment where background noise is present. Can also be used for mixup, as in https://arxiv.org/pdf/1710.09412.pdf A folder of (background noise) sounds to be mixed in must be specified. These sounds should ideally be at least as long as the input sounds to be transformed. Otherwise, the background sound will be repeated, which may sound unnatural. Note that the gain of the added noise is relative to the amount of signal in the input. This implies that if the input is completely silent, no noise will be added. Here are some examples of datasets that can be downloaded and used as background noise: https://github.com/karolpiczak/ESC-50#download https://github.com/microsoft/DNS-Challenge/ AddGaussianNoise Added in v0.1.0 Add gaussian noise to the samples AddGaussianSNR Added in v0.7.0 Add gaussian noise to the input. A random Signal to Noise Ratio (SNR) will be picked uniformly in the decibel scale. This aligns with human hearing, which is more logarithmic than linear. ApplyImpulseResponse Added in v0.7.0 Convolve the audio with a random impulse response. Impulse responses can be created using e.g. http://tulrich.com/recording/ir_capture/ Some datasets of impulse responses are publicly available: - EchoThief containing 115 impulse responses acquired in a wide range of locations. - The MIT McDermott dataset containing 271 impulse responses acquired in everyday places. Impulse responses are represented as wav files in the given ir_path. AddShortNoises Added in v0.9.0 Mix in various (bursts of overlapping) sounds with random pauses between. Useful if your original sound is clean and you want to simulate an environment where short noises sometimes occur. A folder of (noise) sounds to be mixed in must be specified. AirAbsorption Added in v0.25.0 Apply a Lowpass-like filterbank with variable octave attenuation that simulates attenuation of higher frequencies due to air absorption in some cases (10-20 degrees Celsius temperature and 30-90% humidity). BandPassFilter Added in v0.18.0, updated in v0.21.0 Apply band-pass filtering to the input audio. Filter steepness (6/12/18... dB / octave) is parametrized. Can also be set for zero-phase filtering (will result in a 6db drop at cutoffs). BandStopFilter Added in v0.21.0 Apply band-stop filtering to the input audio. Also known as notch filter or band reject filter. It relates to the frequency mask idea in the SpecAugment paper. This transform is similar to FrequencyMask, but has overhauled default parameters and parameter randomization - center frequency gets picked in mel space so it is more aligned with human hearing, which is not linear. Filter steepness (6/12/18... dB / octave) is parametrized. Can also be set for zero-phase filtering (will result in a 6db drop at cutoffs). Clip Added in v0.17.0 Clip audio by specified values. e.g. set a_min=-1.0 and a_max=1.0 to ensure that no samples in the audio exceed that extent. This can be relevant for avoiding integer overflow or underflow (which results in unintended wrap distortion that can sound horrible) when exporting to e.g. 16-bit PCM wav. Another way of ensuring that all values stay between -1.0 and 1.0 is to apply PeakNormalization . This transform is different from ClippingDistortion in that it takes fixed values for clipping instead of clipping a random percentile of the samples. Arguably, this transform is not very useful for data augmentation. Instead, think of it as a very cheap and harsh limiter (for samples that exceed the allotted extent) that can sometimes be useful at the end of a data augmentation pipeline. ClippingDistortion Added in v0.8.0 Distort signal by clipping a random percentage of points The percentage of points that will be clipped is drawn from a uniform distribution between the two input parameters min_percentile_threshold and max_percentile_threshold. If for instance 30% is drawn, the samples are clipped if they're below the 15th or above the 85th percentile. FrequencyMask Added in v0.7.0 Mask some frequency band on the spectrogram. Inspired by https://arxiv.org/pdf/1904.08779.pdf Gain Added in v0.11.0 Multiply the audio by a random amplitude factor to reduce or increase the volume. This technique can help a model become somewhat invariant to the overall gain of the input audio. Warning: This transform can return samples outside the [-1, 1] range, which may lead to clipping or wrap distortion, depending on what you do with the audio in a later stage. See also https://en.wikipedia.org/wiki/Clipping_(audio)#Digital_clipping GainTransition Added in v0.22.0 Gradually change the volume up or down over a random time span. Also known as fade in and fade out. The fade works on a logarithmic scale, which is natural to human hearing. The way this works is that it picks two gains: a first gain and a second gain. Then it picks a time range for the transition between those two gains. Note that this transition can start before the audio starts and/or end after the audio ends, so the output audio can start or end in the middle of a transition. The gain starts at the first gain and is held constant until the transition start. Then it transitions to the second gain. Then that gain is held constant until the end of the sound. HighPassFilter Added in v0.18.0, updated in v0.21.0 Apply high-pass filtering to the input audio of parametrized filter steepness (6/12/18... dB / octave). Can also be set for zero-phase filtering (will result in a 6db drop at cutoff). HighShelfFilter Added in v0.21.0 A high shelf filter is a filter that either boosts (increases amplitude) or cuts (decreases amplitude) frequencies above a certain center frequency. This transform applies a high-shelf filter at a specific center frequency in hertz. The gain at nyquist frequency is controlled by {min,max}_gain_db (note: can be positive or negative!). Filter coefficients are taken from the W3 Audio EQ Cookbook LowPassFilter Added in v0.18.0, updated in v0.21.0 Apply low-pass filtering to the input audio of parametrized filter steepness (6/12/18... dB / octave). Can also be set for zero-phase filtering (will result in a 6db drop at cutoff). LowShelfFilter Added in v0.21.0 A low shelf filter is a filter that either boosts (increases amplitude) or cuts (decreases amplitude) frequencies below a certain center frequency. This transform applies a low-shelf filter at a specific center frequency in hertz. The gain at DC frequency is controlled by {min,max}_gain_db (note: can be positive or negative!). Filter coefficients are taken from the W3 Audio EQ Cookbook Mp3Compression Added in v0.12.0 Compress the audio using an MP3 encoder to lower the audio quality. This may help machine learning models deal with compressed, low-quality audio. This transform depends on either lameenc or pydub/ffmpeg. Note that bitrates below 32 kbps are only supported for low sample rates (up to 24000 hz). Note: When using the lameenc backend, the output may be slightly longer than the input due to the fact that the LAME encoder inserts some silence at the beginning of the audio. Lambda Added in v0.26.0 Apply a user-defined transform (callable) to the signal. Limiter Added in v0.26.0 A simple audio limiter (dynamic range compression). Note: This transform also delays the signal by a fraction of the attack time. LoudnessNormalization Added in v0.14.0 Apply a constant amount of gain to match a specific loudness. This is an implementation of ITU-R BS.1770-4. Warning: This transform can return samples outside the [-1, 1] range, which may lead to clipping or wrap distortion, depending on what you do with the audio in a later stage. See also https://en.wikipedia.org/wiki/Clipping_(audio)#Digital_clipping Normalize Added in v0.6.0 Apply a constant amount of gain, so that highest signal level present in the sound becomes 0 dBFS, i.e. the loudest level allowed if all samples must be between -1 and 1. Also known as peak normalization. Padding Added in v0.23.0 Apply padding to the audio signal - take a fraction of the end or the start of the audio and replace that part with padding. This can be useful for preparing ML models with constant input length for padded inputs. PeakingFilter Added in v0.21.0 Add a biquad peaking filter transform PitchShift Added in v0.4.0 Pitch shift the sound up or down without changing the tempo PolarityInversion Added in v0.11.0 Flip the audio samples upside-down, reversing their polarity. In other words, multiply the waveform by -1, so negative values become positive, and vice versa. The result will sound the same compared to the original when played back in isolation. However, when mixed with other audio sources, the result may be different. This waveform inversion technique is sometimes used for audio cancellation or obtaining the difference between two waveforms. However, in the context of audio data augmentation, this transform can be useful when training phase-aware machine learning models. Resample Added in v0.8.0 Resample signal using librosa.core.resample To do downsampling only set both minimum and maximum sampling rate lower than original sampling rate and vice versa to do upsampling only. Reverse Added in v0.18.0 Reverse the audio. Also known as time inversion. Inversion of an audio track along its time axis relates to the random flip of an image, which is an augmentation technique that is widely used in the visual domain. This can be relevant in the context of audio classification. It was successfully applied in the paper AudioCLIP: Extending CLIP to Image, Text and Audio . RoomSimulator Added in v0.23.0 A ShoeBox Room Simulator. Simulates a cuboid of parametrized size and average surface absorption coefficient. It also includes a source and microphones in parametrized locations. Use it when you want a ton of synthetic room impulse responses of specific configurations characteristics or simply to quickly add reverb for augmentation purposes SevenBandParametricEQ Added in v0.24.0 Adjust the volume of different frequency bands. This transform is a 7-band parametric equalizer - a combination of one low shelf filter, five peaking filters and one high shelf filter, all with randomized gains, Q values and center frequencies. Because this transform changes the timbre, but keeps the overall \"class\" of the sound the same (depending on application), it can be used for data augmentation to make ML models more robust to various frequency spectrums. Many things can affect the spectrum, like room acoustics, any objects between the microphone and the sound source, microphone type/model and the distance between the sound source and the microphone. The seven bands have center frequencies picked in the following ranges (min-max): 42-95 hz 91-204 hz 196-441 hz 421-948 hz 909-2045 hz 1957-4404 hz 4216-9486 hz Shift Added in v0.5.0 Shift the samples forwards or backwards, with or without rollover TanhDistortion Added in v0.19.0 Apply tanh (hyperbolic tangent) distortion to the audio. This technique is sometimes used for adding distortion to guitar recordings. The tanh() function can give a rounded \"soft clipping\" kind of distortion, and the distortion amount is proportional to the loudness of the input and the pre-gain. Tanh is symmetric, so the positive and negative parts of the signal are squashed in the same way. This transform can be useful as data augmentation because it adds harmonics. In other words, it changes the timbre of the sound. See this page for examples: http://gdsp.hf.ntnu.no/lessons/3/17/ TimeMask Added in v0.7.0 Make a randomly chosen part of the audio silent. Inspired by https://arxiv.org/pdf/1904.08779.pdf TimeStretch Added in v0.2.0 Time stretch the signal without changing the pitch Trim Added in v0.7.0 Trim leading and trailing silence from an audio signal using librosa.effects.trim","title":"Waveform transforms"},{"location":"waveform_transforms/#addbackgroundnoise","text":"Added in v0.9.0 Mix in another sound, e.g. a background noise. Useful if your original sound is clean and you want to simulate an environment where background noise is present. Can also be used for mixup, as in https://arxiv.org/pdf/1710.09412.pdf A folder of (background noise) sounds to be mixed in must be specified. These sounds should ideally be at least as long as the input sounds to be transformed. Otherwise, the background sound will be repeated, which may sound unnatural. Note that the gain of the added noise is relative to the amount of signal in the input. This implies that if the input is completely silent, no noise will be added. Here are some examples of datasets that can be downloaded and used as background noise: https://github.com/karolpiczak/ESC-50#download https://github.com/microsoft/DNS-Challenge/","title":"AddBackgroundNoise"},{"location":"waveform_transforms/#addgaussiannoise","text":"Added in v0.1.0 Add gaussian noise to the samples","title":"AddGaussianNoise"},{"location":"waveform_transforms/#addgaussiansnr","text":"Added in v0.7.0 Add gaussian noise to the input. A random Signal to Noise Ratio (SNR) will be picked uniformly in the decibel scale. This aligns with human hearing, which is more logarithmic than linear.","title":"AddGaussianSNR"},{"location":"waveform_transforms/#applyimpulseresponse","text":"Added in v0.7.0 Convolve the audio with a random impulse response. Impulse responses can be created using e.g. http://tulrich.com/recording/ir_capture/ Some datasets of impulse responses are publicly available: - EchoThief containing 115 impulse responses acquired in a wide range of locations. - The MIT McDermott dataset containing 271 impulse responses acquired in everyday places. Impulse responses are represented as wav files in the given ir_path.","title":"ApplyImpulseResponse"},{"location":"waveform_transforms/#addshortnoises","text":"Added in v0.9.0 Mix in various (bursts of overlapping) sounds with random pauses between. Useful if your original sound is clean and you want to simulate an environment where short noises sometimes occur. A folder of (noise) sounds to be mixed in must be specified.","title":"AddShortNoises"},{"location":"waveform_transforms/#airabsorption","text":"Added in v0.25.0 Apply a Lowpass-like filterbank with variable octave attenuation that simulates attenuation of higher frequencies due to air absorption in some cases (10-20 degrees Celsius temperature and 30-90% humidity).","title":"AirAbsorption"},{"location":"waveform_transforms/#bandpassfilter","text":"Added in v0.18.0, updated in v0.21.0 Apply band-pass filtering to the input audio. Filter steepness (6/12/18... dB / octave) is parametrized. Can also be set for zero-phase filtering (will result in a 6db drop at cutoffs).","title":"BandPassFilter"},{"location":"waveform_transforms/#bandstopfilter","text":"Added in v0.21.0 Apply band-stop filtering to the input audio. Also known as notch filter or band reject filter. It relates to the frequency mask idea in the SpecAugment paper. This transform is similar to FrequencyMask, but has overhauled default parameters and parameter randomization - center frequency gets picked in mel space so it is more aligned with human hearing, which is not linear. Filter steepness (6/12/18... dB / octave) is parametrized. Can also be set for zero-phase filtering (will result in a 6db drop at cutoffs).","title":"BandStopFilter"},{"location":"waveform_transforms/#clip","text":"Added in v0.17.0 Clip audio by specified values. e.g. set a_min=-1.0 and a_max=1.0 to ensure that no samples in the audio exceed that extent. This can be relevant for avoiding integer overflow or underflow (which results in unintended wrap distortion that can sound horrible) when exporting to e.g. 16-bit PCM wav. Another way of ensuring that all values stay between -1.0 and 1.0 is to apply PeakNormalization . This transform is different from ClippingDistortion in that it takes fixed values for clipping instead of clipping a random percentile of the samples. Arguably, this transform is not very useful for data augmentation. Instead, think of it as a very cheap and harsh limiter (for samples that exceed the allotted extent) that can sometimes be useful at the end of a data augmentation pipeline.","title":"Clip"},{"location":"waveform_transforms/#clippingdistortion","text":"Added in v0.8.0 Distort signal by clipping a random percentage of points The percentage of points that will be clipped is drawn from a uniform distribution between the two input parameters min_percentile_threshold and max_percentile_threshold. If for instance 30% is drawn, the samples are clipped if they're below the 15th or above the 85th percentile.","title":"ClippingDistortion"},{"location":"waveform_transforms/#frequencymask","text":"Added in v0.7.0 Mask some frequency band on the spectrogram. Inspired by https://arxiv.org/pdf/1904.08779.pdf","title":"FrequencyMask"},{"location":"waveform_transforms/#gain","text":"Added in v0.11.0 Multiply the audio by a random amplitude factor to reduce or increase the volume. This technique can help a model become somewhat invariant to the overall gain of the input audio. Warning: This transform can return samples outside the [-1, 1] range, which may lead to clipping or wrap distortion, depending on what you do with the audio in a later stage. See also https://en.wikipedia.org/wiki/Clipping_(audio)#Digital_clipping","title":"Gain"},{"location":"waveform_transforms/#gaintransition","text":"Added in v0.22.0 Gradually change the volume up or down over a random time span. Also known as fade in and fade out. The fade works on a logarithmic scale, which is natural to human hearing. The way this works is that it picks two gains: a first gain and a second gain. Then it picks a time range for the transition between those two gains. Note that this transition can start before the audio starts and/or end after the audio ends, so the output audio can start or end in the middle of a transition. The gain starts at the first gain and is held constant until the transition start. Then it transitions to the second gain. Then that gain is held constant until the end of the sound.","title":"GainTransition"},{"location":"waveform_transforms/#highpassfilter","text":"Added in v0.18.0, updated in v0.21.0 Apply high-pass filtering to the input audio of parametrized filter steepness (6/12/18... dB / octave). Can also be set for zero-phase filtering (will result in a 6db drop at cutoff).","title":"HighPassFilter"},{"location":"waveform_transforms/#highshelffilter","text":"Added in v0.21.0 A high shelf filter is a filter that either boosts (increases amplitude) or cuts (decreases amplitude) frequencies above a certain center frequency. This transform applies a high-shelf filter at a specific center frequency in hertz. The gain at nyquist frequency is controlled by {min,max}_gain_db (note: can be positive or negative!). Filter coefficients are taken from the W3 Audio EQ Cookbook","title":"HighShelfFilter"},{"location":"waveform_transforms/#lowpassfilter","text":"Added in v0.18.0, updated in v0.21.0 Apply low-pass filtering to the input audio of parametrized filter steepness (6/12/18... dB / octave). Can also be set for zero-phase filtering (will result in a 6db drop at cutoff).","title":"LowPassFilter"},{"location":"waveform_transforms/#lowshelffilter","text":"Added in v0.21.0 A low shelf filter is a filter that either boosts (increases amplitude) or cuts (decreases amplitude) frequencies below a certain center frequency. This transform applies a low-shelf filter at a specific center frequency in hertz. The gain at DC frequency is controlled by {min,max}_gain_db (note: can be positive or negative!). Filter coefficients are taken from the W3 Audio EQ Cookbook","title":"LowShelfFilter"},{"location":"waveform_transforms/#mp3compression","text":"Added in v0.12.0 Compress the audio using an MP3 encoder to lower the audio quality. This may help machine learning models deal with compressed, low-quality audio. This transform depends on either lameenc or pydub/ffmpeg. Note that bitrates below 32 kbps are only supported for low sample rates (up to 24000 hz). Note: When using the lameenc backend, the output may be slightly longer than the input due to the fact that the LAME encoder inserts some silence at the beginning of the audio.","title":"Mp3Compression"},{"location":"waveform_transforms/#lambda","text":"Added in v0.26.0 Apply a user-defined transform (callable) to the signal.","title":"Lambda"},{"location":"waveform_transforms/#limiter","text":"Added in v0.26.0 A simple audio limiter (dynamic range compression). Note: This transform also delays the signal by a fraction of the attack time.","title":"Limiter"},{"location":"waveform_transforms/#loudnessnormalization","text":"Added in v0.14.0 Apply a constant amount of gain to match a specific loudness. This is an implementation of ITU-R BS.1770-4. Warning: This transform can return samples outside the [-1, 1] range, which may lead to clipping or wrap distortion, depending on what you do with the audio in a later stage. See also https://en.wikipedia.org/wiki/Clipping_(audio)#Digital_clipping","title":"LoudnessNormalization"},{"location":"waveform_transforms/#normalize","text":"Added in v0.6.0 Apply a constant amount of gain, so that highest signal level present in the sound becomes 0 dBFS, i.e. the loudest level allowed if all samples must be between -1 and 1. Also known as peak normalization.","title":"Normalize"},{"location":"waveform_transforms/#padding","text":"Added in v0.23.0 Apply padding to the audio signal - take a fraction of the end or the start of the audio and replace that part with padding. This can be useful for preparing ML models with constant input length for padded inputs.","title":"Padding"},{"location":"waveform_transforms/#peakingfilter","text":"Added in v0.21.0 Add a biquad peaking filter transform","title":"PeakingFilter"},{"location":"waveform_transforms/#pitchshift","text":"Added in v0.4.0 Pitch shift the sound up or down without changing the tempo","title":"PitchShift"},{"location":"waveform_transforms/#polarityinversion","text":"Added in v0.11.0 Flip the audio samples upside-down, reversing their polarity. In other words, multiply the waveform by -1, so negative values become positive, and vice versa. The result will sound the same compared to the original when played back in isolation. However, when mixed with other audio sources, the result may be different. This waveform inversion technique is sometimes used for audio cancellation or obtaining the difference between two waveforms. However, in the context of audio data augmentation, this transform can be useful when training phase-aware machine learning models.","title":"PolarityInversion"},{"location":"waveform_transforms/#resample","text":"Added in v0.8.0 Resample signal using librosa.core.resample To do downsampling only set both minimum and maximum sampling rate lower than original sampling rate and vice versa to do upsampling only.","title":"Resample"},{"location":"waveform_transforms/#reverse","text":"Added in v0.18.0 Reverse the audio. Also known as time inversion. Inversion of an audio track along its time axis relates to the random flip of an image, which is an augmentation technique that is widely used in the visual domain. This can be relevant in the context of audio classification. It was successfully applied in the paper AudioCLIP: Extending CLIP to Image, Text and Audio .","title":"Reverse"},{"location":"waveform_transforms/#roomsimulator","text":"Added in v0.23.0 A ShoeBox Room Simulator. Simulates a cuboid of parametrized size and average surface absorption coefficient. It also includes a source and microphones in parametrized locations. Use it when you want a ton of synthetic room impulse responses of specific configurations characteristics or simply to quickly add reverb for augmentation purposes","title":"RoomSimulator"},{"location":"waveform_transforms/#sevenbandparametriceq","text":"Added in v0.24.0 Adjust the volume of different frequency bands. This transform is a 7-band parametric equalizer - a combination of one low shelf filter, five peaking filters and one high shelf filter, all with randomized gains, Q values and center frequencies. Because this transform changes the timbre, but keeps the overall \"class\" of the sound the same (depending on application), it can be used for data augmentation to make ML models more robust to various frequency spectrums. Many things can affect the spectrum, like room acoustics, any objects between the microphone and the sound source, microphone type/model and the distance between the sound source and the microphone. The seven bands have center frequencies picked in the following ranges (min-max): 42-95 hz 91-204 hz 196-441 hz 421-948 hz 909-2045 hz 1957-4404 hz 4216-9486 hz","title":"SevenBandParametricEQ"},{"location":"waveform_transforms/#shift","text":"Added in v0.5.0 Shift the samples forwards or backwards, with or without rollover","title":"Shift"},{"location":"waveform_transforms/#tanhdistortion","text":"Added in v0.19.0 Apply tanh (hyperbolic tangent) distortion to the audio. This technique is sometimes used for adding distortion to guitar recordings. The tanh() function can give a rounded \"soft clipping\" kind of distortion, and the distortion amount is proportional to the loudness of the input and the pre-gain. Tanh is symmetric, so the positive and negative parts of the signal are squashed in the same way. This transform can be useful as data augmentation because it adds harmonics. In other words, it changes the timbre of the sound. See this page for examples: http://gdsp.hf.ntnu.no/lessons/3/17/","title":"TanhDistortion"},{"location":"waveform_transforms/#timemask","text":"Added in v0.7.0 Make a randomly chosen part of the audio silent. Inspired by https://arxiv.org/pdf/1904.08779.pdf","title":"TimeMask"},{"location":"waveform_transforms/#timestretch","text":"Added in v0.2.0 Time stretch the signal without changing the pitch","title":"TimeStretch"},{"location":"waveform_transforms/#trim","text":"Added in v0.7.0 Trim leading and trailing silence from an audio signal using librosa.effects.trim","title":"Trim"}]}